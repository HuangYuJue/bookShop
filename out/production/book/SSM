SSM:
    服务器开发一般使用三层架构，分别是表现层(web层)、业务层和持久层。
    表现层(web层)   ->   业务层    ->   持久层
    springmvc框架  -> spring框架  -> mybatis框架
    1) springmvc位于表现层，主要与浏览器进行交互（接收和响应浏览器请求）。
    springmvc采用MVC设计模型，模型由model、view和controller组成。
         ● model(模型)：对应JavaBean
         ● view(视图)：对应jsp
         ● controller(控制器)：对应servlet
    2) spring位于业务层，用于实现具体业务逻辑。
    3) mybatis位于持久层，根据内存中的数据操作数据库（增、删、改、查）。
    三者的工作流程：
    浏览器页面（view）向控制器（controller）发送请求参数，控制器接收页面请求
    并将请求参数发送到模型（model），模型将请求参数封装成JavaBean，最后
    将JavaBean发送到业务层，至此表现层处理过程结束。……springmvc
    业务层根据接收的JavaBean做业务处理操作，再将操作后的业务数据发送到持久层。……spring
    持久层根据接收的业务数据操作数据库（增、删、改、查）。……mybatis
    最终持久层将响应结果发送到业务层，业务层再将响应结果发送到表现层，浏览器则根据响应结果进行页面展示。

（Spring+SpringMVC+MyBatis）框架集由Spring、MyBatis两个开源框架
整合而成（SpringMVC是Spring中的部分内容），常作为数据源较简单的web项目的框架。
    ①Spring:
Spring就像是整个项目中装配bean的大工厂，在配置文件中可以指定使用特定的参数去调用实体类的构造方法来实例化对象。也可以称之为项目中的粘合剂。
Spring的核心思想是IOC（控制反转，把创建对象的过程交给Spring进行管理）和AOP（面向切面，不修改源代码进行功能增强；拦截器和过滤器其实都是aop编程思想的实现，都可以提现权限检查，日志记录;
filter是Servlet规定规范规定的，是Servlet容器支持的，只能用于web程序中，而拦截器既可以用于web中，也可以用于Application,Swing程序中。拦截器是在Spring容器内的，是Spring框架支持的），
即不再需要程序员去显式地`new`一个对象，而是让Spring框架帮你来完成这一切。
    ②SpringMVC:
    springmvc位于表现层，主要
SpringMVC在项目中拦截用户请求，它的核心Servlet即DispatcherServlet承担中介或是前台这样的职责，
将用户请求通过HandlerMapping去匹配Controller，Controller就是具体对应请求所执行的操作。SpringMVC相当于SSH框架中struts。
    ③mybatis
mybatis是对jdbc的封装，它让数据库底层操作变的透明。mybatis的操作都是围绕一个sqlSessionFactory实例展开的。
mybatis通过配置文件关联到各实体类的Mapper文件，Mapper文件中配置了每个类对数据库所需进行的sql语句映射。
在每次与数据库交互时，通过sqlSessionFactory拿到一个sqlSession，再执行sql命令。
页面发送请求给控制器，控制器调用业务层处理逻辑，逻辑层向持久层发送请求，持久层与数据库交互，
后将结果返回给业务层，业务层将处理逻辑发送给控制器，控制器再调用视图展现数据。

ssm的四层，entity，dao，service，controller:
    entity层：
    A：entity就是属性类，通常定义在model层里面，相当于MVC的M层，属于数据模型层
    B：一般得实体类对应一个数据表，其中的属性定义数据表中的字段，实体类的字段数量 >= 数据库表中需要操作的字段数量
    同类： model层 = entity层 = domain层
    作用： 用于存放我们的实体类，与数据库中的属性值基本保持一致。
    dao层：
    A：dao层叫做数据访问层，全称为data access object，属于一种比较底层基础得操作，具体到对某个表得增删改查，换句话说，某个dao一定是和数据库中的某一张表一一对应的，而且其中也只是封装了增删改查得方法
    同类： mapper层 = dao层
    作用： 对数据库进行数据持久化操作，他的方法语句是直接针对数据库操作的
    service层：
    A：service层即为业务逻辑层，可以理解为对一个或者多个dao进行得再次封装，主要是针对具体的问题的操作，把一些数据层的操作进行组合，间接与数据库打交道（提供操作数据库的方法）。要做这一层的话，要先设计接口，再实现类。
    同类： 只有一个 service层
    作用： service层 是针对 controller层的 controller，也就是针对我们使用者。service的 impl 是把mapper和service进行整合的文件。
    controller层：
    A：负责请求转发，接收页面过来的参数，传给service处理，接到返回值，并再次传给页面
    同类： controller层 = web 层
    作用： 控制器，导入service层，因为service中的方法是我们使用到的，controller通过接收前端传过来的参数进行业务操作，再将处理结果返回到前端。
    mapper层
    A：数据存储对象，相当于DAO层，mapper层直接与数据库打交道（执行SQL语句），接口提供给service层。
